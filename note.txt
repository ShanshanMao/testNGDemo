
一、testNG 框架：

 //最基本的注解，用来把方法标记为测试的一部分
1   @Test
    public void testCase1(){
        System.out.println("This is test case 1");

    }
2 注解BeforeMethod和AfterMethod
    每一个test的内容都会运行一次before和after的方法。

3 注解BeforeClass和AfterClass
    BeforeClass是在类运行之前运行的方法
    AfterClass是在类运行之后运行的方法
  在类运行之前是否需要注入一些对象、静态的东西或者变量赋值时可以应用。

4 注解BeforeSuite和AfterSuite
    这个suite把class包裹起来了，所以这个suite可以包含多个class，这个类就是属于某个测试套件下面的。

5 testNG套件测试

6 testNG忽略测试（本次测试执行之前不想执行的测试）(enabled)
    @Test(enabled = false) 将不执行该条测试。

7 组（group）测试中的方法分组测试（testNG组测试）
    @Test(groups = "server")
    @BeforeGroups("server")
        public void beforeGroupsOnServer(){
            System.out.println("这是服务端组运行之前运行的方法！");
        }
    @AfterGroups("server")
        public void AfterGroupsOnServer(){
            System.out.println("这是服务端组运行之后运行的方法！");
        }

8 组测试中的类分组测试
    groupsOnClass1\2\3 以及 groupsOnClass.xml 组成

9 testNG异常测试
    expectedException 这个类
     @Test(expectedExceptions = RuntimeException.class)

10 testNG依赖测试（就是本次测试的方法依赖其他方法）
    @Test
        public void test1(){
            System.out.println("test1 run !");
        }
    @Test(dependsOnMethods = {"test1"})

11 参数化测试-xml文件参数化（如何通过外部和内部来传递参数）
    @Test
    @Parameters({"name","age"}) //这里还差一个配置项，配置项仍然在resources里面添加
        public void paramTest1(String name,int age){
            System.out.println("name = "+name + ","+"age="+age);
        }

12 参数化测试-DataProvider参数化
@DataProvider

13 多线程测试-注解方式实现（多个线程执行一个方法）
    MultiThreadOnAnnotion
    @Test(invocationCount = 10) // 直接在test里面加一个invocationCount属性就可以了

14 多线程测试-xml文件实现

15 TestNG超时测试（多长时间没有响应）
   添加timeout属性
    @Test(timeOut = 3000)//单位为毫秒值
    public void testSuccess()throws InterruptedException{
        Thread.sleep(2000);
    }



----------------------------------------------------------

二 、测试报告：extentReport

1、测试报告
testng自带测试报告、reportNG测试报告（比testng自带的更加美观一点）、extentReport

2、testNG 断言及日志方法


3、extentReport的配置和使用
在pom文件中引入：<dependencies>
                  <dependency>
                      <groupId>com.relevantcodes</groupId>
                      <artifactId>extentreports</artifactId>
                      <version>2.41.2</version>
                  </dependency>

                  <dependency>
                      <groupId>com.vimalselvam</groupId>
                      <artifactId>testng-extentsreport</artifactId>
                      <version>1.3.1</version>
                  </dependency>
                  <dependency>
                              <groupId>com.aventstack</groupId>
                              <artifactId>extentreports</artifactId>
                              <version>3.1.5</version>
                          </dependency>
              </dependencies>

在resources下添加xml文件，在里面配置信息
 <test name = "这些是测试模块">
         <classes>
             <class name = "com.tester.extend.demo.TestMethodDemo">
                 <method>
                     <include name="test1"/>
                     <include name="test2"/>
                     <include name="test3"/>
                     <include name="logDemo"/>
                 </method>

             </class>
         </classes>
     </test>

 ##测试报告是监听整个执行过程中收集数据。所以这里需要添加这个监听器。
    <listeners>
        <listener class-name = "com.vimalselvam.testng.listener.ExtentTestNgFormatter"/>

    </listeners>


-----------------------------------------------------------------
三 、 mock接口框架的应用

1、moco框架基本介绍
    moco-runner 安装配置
    下载jar

    https://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.11.0/moco-runner-0.11.0-standalone.jar
    下载好后直接复制到chapter7里面（chapter7是直接新建的一个目录）

 java -jar ./moco-runner-0.11.0-standalone.jar http -p 8888 -c startup1.json(json配置文件)
  http://localhost:8888/demo既可打开json内容

2、moco框架的http协议get方法mock实现
带参数的请求：http://localhost:8888/getwithparam?name=ssmao&age=25&idol=elva

3、moco中配置post请求以及带参数的请求
post请求不能在浏览器中打开，可以利用jmeter打开

post里面的参数用"forms"

4、moco框架中如何加入cookies

5、moco框架中如何加入header

6、moco框架中如何进行重定向
------------------------------------------------------------------

四 http协议接口

1、在浏览器中查看http协议信息头
2、请求头字段含义
    Accept：表示 浏览器告诉服务器它所支持的数据类型
    Accept-Charset：浏览器告诉服务器它采用的字符集
    Accept-Encoding：浏览器告诉服务器它所支持的压缩格式
    Accept-Language：浏览器告诉服务器它采用的语言
    Host：浏览器告诉服务器，浏览器想访问服务器哪台主机
    if-Modified-Since：浏览器告诉服务器它缓存数据时间是多少
    referer：浏览器告诉服务器，浏览器是从哪个网页点过来的（防盗链）
    user—Agent：浏览器告诉服务器，浏览器所使用的浏览器类型、版本等信息
    Data：浏览器告诉服务器，浏览器什么时间访问的

3、响应头信息字段含义
    location：这个告诉浏览器去找谁，配合302状态码使用。（302转发）
    server：告诉浏览器服务器的类型
    content-encoding：告诉浏览器回送的数据采用的压缩格式
    content-type：告诉浏览器回送的数据类型
    last-modified：告诉浏览器数据的最后修改时间
    refresh：用于控制浏览器定时刷新
    content-disposition：告诉浏览器需要以下载方式打开回送的数据
    transfer-encoding：告诉浏览器数据是以分块形式回送的

4、cookie和session的区别
    cookie在客户端的头信息中。
    session在服务端存储，文件、数据库等都可以。
    一般来说session的验证需要cookie带一个字段来表示这个用户是哪一个session。
    session的验证需要cookie带一个字段来表示这个用户是哪一个session，所以当客户端禁用cookie时，session将失效。
cookie总结：cookie的信息是自定义的。就是一小段文本信息。cookie的值由服务端生产，客户端保存。
cookie格式：key:value; key:value

---------------------------------------------------------------

五、httpClient测试框架
1、mock一个返回cookies信息的请求


-------------------------------------------------------------

六、接口开发SpringBoot

1、springBoot介绍与官方demo
使用Springboot的官网demo进行练习
我们添加的hello()方法被设计成接受一个名为name的字符串参数，然后将该参数与代码中的单词“hello”组合起来。
这意味着如果您在请求中将您的名字设置为“Amy”，那么响应将是“Hello Amy”。

@RestController注释告诉Spring，这段代码描述了一个应该在web上可用的端点。
@GetMapping(" /hello ")告诉Spring使用我们的hello()方法来响应发送到http://localhost:8080/hello地址的请求。
@RequestParam告诉Spring在请求中期望有一个name值，但是如果没有，它将默认使用“World”这个词。

2、返回cookies信息的get接口开发

MyGetMethod

3、要求携带cookies信息访问的get接口开发

使用jmeter查看访问结果，需要创建http请求和httpcookies请求

4、需求携带参数的get请求两种开发方式
第一种实现方式 url: key=value&key=value
第二种： url: ip:port/get/with/param/10/20

使用浏览器打开访问结果 http://localhost:8877/get/with/param/10/20

5、SpringBoot集成swaggerUI
swaggerUI就是一个自动生成接口文档的插件
访问的时候直接使用 http://localhost:8877/swagger-ui.html

6、返回cookies信息的post接口开发

7、I-cookies验证和返回用户列表的post接口开发以及常见错误
在idea里面搜索一个插件：Lombok
创建了一个bean包，再在post method里面写
应用Lombok这个插件可以帮助我们使用@Getter and @Setter

